package scrollclass{	/////////////////////////////////////////tweenmax	import gs.TweenMax;		//import com.scrollclass.ScrollBox;	//import com.scrollclass.ScrollBarEvent;		//import caurina.transitions.*;			import flash.display.*;	import flash.events.*;	import flash.display.Stage;	import flash.display.BlendMode;			public class ScrollBar extends MovieClip	{		private var sbox:ScrollBox;		private var _stage:Stage;				private var box:MovieClip;		//object		private var _x_y:String;		private var _roll_on:Boolean;		private var _speed:Number;						private var _offset:Number;		private var _min:Number;		private var _max:Number;										public function ScrollBar(_st:Stage, _scbox:MovieClip, $params:Object):void		{			_stage = _st;			box = _scbox;									_x_y = $params._x_y;			_roll_on = $params._roll_on;			_speed = $params._speed;						//check if scroll is needed			checkIfNeeded();						_min = 0;			if (_x_y == 'x')			_max = box.sb.track.width - box.sb.thumb.width;			else if (_x_y == 'y')			_max = box.sb.track.height - box.sb.thumb.height;						//event			addEventListener(ScrollBarEvent.VALUE_CHANGED, sbChange);						box.sb.thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDown);			box.sb.track.addEventListener(MouseEvent.MOUSE_DOWN, trackDown);			if(_roll_on)			{			box.addEventListener(MouseEvent.MOUSE_OVER, thumbRoll);			box.addEventListener(MouseEvent.MOUSE_OUT, thumbOut);			}			_stage.addEventListener(MouseEvent.MOUSE_UP, thumbUp);			_stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);						//hide sb			if (!$params._sb_visible)			{				hideInterface();			}					}				private function checkIfNeeded():void		{			if (_x_y == 'x')			{				if (box.content.width < box.sb.track.width - box.sb.thumb.width)				box.sb.visible = false;			}			else if (_x_y == 'y')			{				/*trace("content height: " + box.content.height);				trace("content height: " + box.sb.track.height);				trace("content height: " + box.content.texto.height);*/								if (box.content.texto.height < box.sb.track.height - box.sb.thumb.height)				{					box.sb.visible = false;				}				else				{					box.sb.visible = true;				}			}		}						private function setMinMax():void		{			if (_x_y == 'x')			{				if(box.sb.thumb.x <= _min)				box.sb.thumb.x = _min;				if(box.sb.thumb.x >= _max)				box.sb.thumb.x = _max;				dispatchEvent(new ScrollBarEvent(box.sb.thumb.x/_max));			}			else if (_x_y == 'y')				{					if(box.sb.thumb.y <= _min)					box.sb.thumb.y = _min;					if(box.sb.thumb.y >= _max)					box.sb.thumb.y = _max;					dispatchEvent(new ScrollBarEvent(box.sb.thumb.y/_max));				}		}										//set via params		private function thumbOut(e:MouseEvent):void		{			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMoveRoll);		}						private function thumbRoll(e:MouseEvent):void		{						_stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbMoveRoll);			if (_x_y == 'x')			_offset = mouseX - box.sb.thumb.x;			else if (_x_y == 'y')			_offset = mouseY - box.sb.thumb.y;		}					private function thumbDown(e:MouseEvent):void		{			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMoveRoll);						_stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbMove);			if (_x_y == 'x')			_offset = mouseX - box.sb.thumb.x;			else if (_x_y == 'y')			_offset = mouseY - box.sb.thumb.y;						// testes do afonso e malt para verao 2010						/*trace ("larg texto na class: " + box.content.texto.width);			trace ("alt texto na class: " + box.content.texto.height);*/						//////////////////////////////////////////////////////////////		}		private function trackDown(e:MouseEvent):void		{			if (_x_y == 'x')			{				box.sb.thumb.x = box.sb.mouseX;				setMinMax();			}			else if (_x_y == 'y')				{					box.sb.thumb.y = box.sb.mouseY;					setMinMax();				}		}						private function thumbUp(e:MouseEvent):void		{			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMove);		}						private function thumbMoveRoll(e:MouseEvent):void		{			if (_x_y == 'x')			{			box.sb.thumb.x = box.mouseX - box.sb.thumb.width/2;			setMinMax();			}			else if (_x_y == 'y')				{					box.sb.thumb.y = box.mouseY - box.sb.thumb.height/2;					setMinMax();				}					}		private function thumbMove(e:MouseEvent):void		{			if (_x_y == 'x')			{				box.sb.thumb.x = mouseX - _offset;				setMinMax();			}			else if (_x_y == 'y')				{					box.sb.thumb.y = mouseY - _offset;					setMinMax();				}							e.updateAfterEvent();		}				public function mouseWheelHandler(e:MouseEvent):void 		{			if (_x_y == 'x')			{			box.sb.thumb.x-=(e.delta*2);			setMinMax();			dispatchEvent(new ScrollBarEvent(box.sb.thumb.x/_max));			}			if (_x_y == 'y')			{			box.sb.thumb.y-=(e.delta*2);			setMinMax();			dispatchEvent(new ScrollBarEvent(box.sb.thumb.y/_max));			}			e.updateAfterEvent();		}				private function hideInterface():void		{			/*if(!_verbose)			video_container.holder_mc.blendMode = BlendMode.ERASE;*/						box.sb.blendMode = BlendMode.ERASE;		}																		/////////////////		private function sbChange(e:ScrollBarEvent):void		{			if (_x_y == 'x')				{				TweenMax.to(box.content, _speed, {  x:(-e.scrollPercent*(box.content.width - box.masker.width))    });								/*Tweener.addTween(box.content, {x:(-e.scrollPercent*(box.content.width - box.masker.width)),								time:1 } );*/				}				else if (_x_y == 'y')					{					TweenMax.to(box.content, _speed, {  y:(-e.scrollPercent*(box.content.texto.height - box.masker.height))    });					/*Tweener.addTween(box.content, {y:(-e.scrollPercent*(box.content.height - box.masker.height)),								time:1 } );*/					}		}	///////////	}}